// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package submit

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SubmitFileRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitFileRequest[number], err)
}

func (x *SubmitFileRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Filename, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubmitFileRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Data, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *SubmitFileResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitFileResponse[number], err)
}

func (x *SubmitFileResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubmitFileResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *SubmitFileRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubmitFileRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Filename == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetFilename())
	return offset
}

func (x *SubmitFileRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Data) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetData())
	return offset
}

func (x *SubmitFileResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubmitFileResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMessage())
	return offset
}

func (x *SubmitFileResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 2, x.GetStatus())
	return offset
}

func (x *SubmitFileRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubmitFileRequest) sizeField1() (n int) {
	if x.Filename == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetFilename())
	return n
}

func (x *SubmitFileRequest) sizeField2() (n int) {
	if len(x.Data) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetData())
	return n
}

func (x *SubmitFileResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubmitFileResponse) sizeField1() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMessage())
	return n
}

func (x *SubmitFileResponse) sizeField2() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeUint32(2, x.GetStatus())
	return n
}

var fieldIDToName_SubmitFileRequest = map[int32]string{
	1: "Filename",
	2: "Data",
}

var fieldIDToName_SubmitFileResponse = map[int32]string{
	1: "Message",
	2: "Status",
}
